data segment
	str1 db 255, 256 dup ("?")
	str2 db 255, 256 dup ("?")
	counter db ?
	msg1 db "Write str1: $"
    msg2 db "Write str2: $"
	not_found db "Str2 is not a substring of str1 or there are no more substrings str2 in str1!$"
	found db "Str2 found at position: $"
	num_sub db "The number of substrings str2 in str1: $"
data ends

code segment
	assume cs:code, ds:data
	start:
		mov ax, data
		mov ds, ax
		
		lea dx, msg1
		mov ah, 9
		int 21h                     ; вывести сообщение о вводе строки1
		lea dx, str1
		mov ah, 0Ah
		int 21h                     ; записать строку в str1
		mov ah, 2     			    ; установка курсора в начало новой строки
		mov dl, 13    			    ; возврат каретки (начало текущей строки)
		int 21h
		mov dl, 10    			    ; новая строка
		int 21h

		lea dx, msg2
		mov ah, 9
		int 21h                     ; вывести сообщение о вводе строки2
		lea dx, str2
		mov ah, 0Ah
		int 21h                     ; записать строку в str2
		mov ah, 2     			    ; установка курсора в начало новой строки
		mov dl, 13    			    ; возврат каретки (начало текущей строки)
		int 21h
		mov dl, 10    			    ; новая строка
		int 21h
		
		mov bh, [str1+1]            ; длина 1-ой строки
		mov ch, [str2+1]            ; длина 2-ой строки
		mov dx, 1                   ; номер начала второй строки в первой
		mov si, offset str1 + 2     ; указатель на начало 1-ой строки
		mov di, offset str2 + 2     ; указатель на начало 2-ой строки	
		mov bl, 0
	count_loop:
		call STR2_IN_STR1
		xor ax, ax
		mov al, counter
		add al, bl
		mov counter, al
		mov di, offset str2 + 2 
		add dl, ch
		push dx
		mov ah, 2     			    ; установка курсора в начало новой строки
		mov dl, 13    			    ; возврат каретки (начало текущей строки)
		int 21h
		mov dl, 10    			    ; новая строка
		int 21h
		pop dx
		cmp bh, 0
		jg count_loop
	quit:
		lea dx, num_sub
		mov ah, 9
		int 21h                     ; вывести сообщение о кол-ве вхождений
		xor dx, dx
		mov dl, counter
		mov ax, dx
		mov bx, 10
		xor dx, dx
		div bx
		mov si, dx                   ; si - младщая часть
		xor dx, dx
		div bx
		mov ah, 2
		add dx, "0"                  ; преобразуем число в ASCII код
		int 21h
		mov dx, si
		add dx, "0"                  ; преобразуем число в ASCII код
		int 21h
		mov ax, 4c00h    			; выход из программы в DOS
		int 21h

STR2_IN_STR1 proc near               
		cmp bh, ch
		jb not_in
		
		mov ah, 0
		mov al, ch                  ; счетчик длины 2-ой строки
	cmp_loop:	
		mov bl, [si]                ; ASCII код символа 1-ой строки
		mov cl, [di]                ; ASCII код символа 2-ой строки
		push bx
		push ax
		sub bh, al
		mov al, bh
		cmp al, 0
		pop ax
		pop bx
		jl not_in
		cmp bl, cl
		je equal
		inc dx 
		inc si    
		dec bh
		mov di, offset str2 + 2     ; возврат указателя на начало 2-ой строки
		mov al, ch
		cmp bh, 0
		je not_in
		jmp cmp_loop
	equal:
		inc si                   
		inc di   
		dec bh
		dec al
		cmp al, 0
		je sub_pos
		mov bl, [si]                 ; ASCII код символа 1-ой строки
		mov cl, [di]                 ; ASCII код символа 2-ой строки
		inc ah
		cmp bl, cl
		je skip
		add dl, ah
	skip:
		jmp cmp_loop
	
	sub_pos:
		mov bl, 1
		push bx
		push dx
		push si
		push di
		push cx
		mov ax, dx
		mov bx, 10
		xor dx, dx
		div bx
		mov si, dx                   ; si - младщая часть
		xor dx, dx
		div bx
		mov di, dx                   ; di - средняя часть
		mov cx, ax                   ; cx - старшая часть
	
		lea dx, found
		mov ah, 9
		int 21h   
		mov ah, 2
		
		mov dx, cx
		add dx, "0"                  ; преобразуем число в ASCII код
		int 21h
		mov dx, di
		add dx, "0"                  ; преобразуем число в ASCII код
		int 21h
		mov dx, si
		add dx, "0"                  ; преобразуем число в ASCII код
		int 21h
		pop cx
		pop di
		pop si
		pop dx
		pop bx
		ret
		
	not_in:
		xor bx, bx
		lea dx, not_found
		mov ah, 9
		int 21h   
		ret
STR2_IN_STR1 endp

code ends
end start